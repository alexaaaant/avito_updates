import asyncio
import time
from bs4 import BeautifulSoup
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.common.exceptions import WebDriverException
from telegram import Bot
from telegram.constants import ParseMode
from telegram.ext import ApplicationBuilder
import logging
import undetected_chromedriver as uc
from urllib.parse import urlparse


# === –ù–ê–°–¢–†–û–ô–ö–ò ===

AVITO_URLS = [
	'https://m.avito.ru/voronezh/kvartiry/prodam-ASgBAgICAUSSA8YQ?context=H4sIAAAAAAAA_wE9AML_YToyOntzOjg6ImZyb21QYWdlIjtzOjU6InNzZmF2IjtzOjk6ImZyb21fcGFnZSI7czo1OiJzc2ZhdiI7fQMFMC09AAAA&drawId=168979684a93259dc3ea6fe6b0f6d430&f=ASgBAgECBUSSA8YQ5geMUuYW5vwBrL4NpMc1qt8VAgJFkC4UeyJmcm9tIjo2LCJ0byI6bnVsbH3GmgwXeyJmcm9tIjowLCJ0byI6NjAwMDAwMH0&map=e30%3D&s=104',
	'https://m.avito.ru/voronezh/kvartiry/prodam-ASgBAgICAUSSA8YQ?context=H4sIAAAAAAAA_wE9AML_YToyOntzOjg6ImZyb21QYWdlIjtzOjU6InNzZmF2IjtzOjk6ImZyb21fcGFnZSI7czo1OiJzc2ZhdiI7fQMFMC09AAAA&drawId=e1a1dd8bf19ed639227b69a8a8eec84e&f=ASgBAgECBUSSA8YQ5geMUuYW5vwBrL4NpMc1qt8VAgJFkC4UeyJmcm9tIjo2LCJ0byI6bnVsbH3GmgwXeyJmcm9tIjowLCJ0byI6NjAwMDAwMH0&map=e30%3D&s=104'
]

TELEGRAM_TOKEN = '1048191428:AAE9Jn95v7z68Q5Nx-VxHXbPCejG1wn-Ypg'
CHECK_INTERVAL = 300  # –í —Å–µ–∫—É–Ω–¥–∞—Ö
MAX_RETRIES = 3

# === –°–û–°–¢–û–Ø–ù–ò–ï ===

seen_links_by_url = {}
bot = Bot(token=TELEGRAM_TOKEN)
CHAT_ID = None

def create_driver():
	print('–°–æ–∑–¥–∞–µ–º –¥—Ä–∞–π–≤–µ—Ä')
	options = uc.ChromeOptions()
	options.headless = True
	options.add_argument("--disable-blink-features=AutomationControlled")
	options.add_argument("--window-size=390,844")
	options.add_argument("--user-agent=Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1")
	print("–î—Ä–∞–π–≤–µ—Ä —Å–æ–∑–¥–∞–Ω")
	return uc.Chrome(options=options)

def get_ads_from_page(driver, url, retry_count=0):
	try:
		print(f"–ü–µ—Ä–µ–¥–∞–ª–∏ —É—Ä–ª –≤ –¥—Ä–∞–π–≤–µ—Ä {url}")
		driver.get(url)
		time.sleep(5)
		html = driver.page_source
		print(f"–†–∞—Å–ø–∞—Ä—Å–∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —É—Ä–ª {url}")

		if "–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω" in html or 'items/list' not in html:
			print(f"[BLOCKED] –ü–æ–ø—ã—Ç–∫–∞ {retry_count + 1}")
			if retry_count < MAX_RETRIES:
				time.sleep(900)
				return get_ads_from_page(driver, url, retry_count + 1)
			else:
				return set()

		soup = BeautifulSoup(html, 'html.parser')
		items_list = soup.find('div', attrs={"data-marker": "items/list"})
		print(f"–ò–∑–≤–ª–µ–∫–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã {url}")

		if not items_list:
			return set()

		ad_links = set()
		wrappers = items_list.find_all('div', attrs={"data-marker": lambda x: x and x.startswith("item-wrapper(")})
		for wrapper in wrappers:
			a_tag = wrapper.find('a', attrs={"data-marker": "item/link"})
			if a_tag and a_tag.has_attr("href"):
				raw_link = f"https://m.avito.ru{a_tag['href']}"
				clean_link = urlparse(raw_link)._replace(query="").geturl()
				ad_links.add(clean_link)

		return ad_links

	except WebDriverException as e:
		print(f"[ERROR] Selenium: {e}")
		return set()

# === TELEGRAM ===

async def get_chat_id():
	global CHAT_ID
	updates = await bot.get_updates()
	if updates:
		CHAT_ID = updates[-1].message.chat.id
		print(f"‚úÖ –ß–∞—Ç ID: {CHAT_ID}")
	else:
		print("‚ùó –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ Telegram")

async def check_one_url(driver, url):
	current_links = get_ads_from_page(driver, url)

	if not current_links:
		print(f"‚ö†Ô∏è –ü—Ä–æ–≥—Ä–µ–≤ –∫—ç—à–∞ –Ω–µ —É–¥–∞–ª—Å—è: –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è {url}")
	else:
		seen_links_by_url[url] = current_links
		print(f"‚úÖ –ö—ç—à –ø—Ä–æ–≥—Ä–µ—Ç –¥–ª—è {url} ‚Äî {len(current_links)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

async def check_one_url_fully(driver, url, name):
	current_links = get_ads_from_page(driver, url)
	new_links = current_links - seen_links_by_url.get(url, set())

	if new_links:
		for link in new_links:
			await bot.send_message(chat_id=CHAT_ID, text=f"üÜï –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:\n{link} ({name})")
			print(f"üì® –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ: {link} ({name})")
		seen_links_by_url[url].update(new_links)
	else:
		print(f"[{name}] ‚Äî –±–µ–∑ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π")

async def check_new_ads(driver):
	print("üîÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à...")
	await check_one_url(driver, AVITO_URLS[0])
	await asyncio.sleep(CHECK_INTERVAL / 3)
	await check_one_url(driver, AVITO_URLS[1])

	print("üîÅ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ü–∏–∫–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è...")

	while True:
		try:
			await check_one_url_fully(driver, AVITO_URLS[0], '—Ü–µ–Ω—Ç—Ä')
			await asyncio.sleep(CHECK_INTERVAL / 3)
			await check_one_url_fully(driver, AVITO_URLS[1], '—Å–µ–≤–µ—Ä–Ω—ã–π')
		except Exception as e:
			print("‚ùó –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ:", e)

		await asyncio.sleep(CHECK_INTERVAL)

async def main():
	global CHAT_ID
	print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
	driver = create_driver()

	try:
		while CHAT_ID is None:
			await get_chat_id()
			await asyncio.sleep(5)

		await check_new_ads(driver)
	finally:
		print("üõë –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
		driver.quit()

if __name__ == "__main__":
	logging.basicConfig(level=logging.INFO)
	asyncio.run(main())
